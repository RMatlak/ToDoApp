{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","isChecked","date","_this","handleDate","e","value","target","setState","handleChange","type","checked","handleClick","_this$state","props","addTask","maxDate","this","react_default","a","createElement","Fragment","className","htmlFor","onChange","placeholder","id","min","max","onClick","Component","Task","_props$task","task","active","finishDate","important","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","length","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","App","counter","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","forEach","getTime","alert","push","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5146b26d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    isChecked: false,\r\n    date: this.minDate\r\n  };\r\n\r\n  handleDate = e => {\r\n    const value = e.target.value;\r\n    this.setState({\r\n      date: value\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    const type = e.target.type;\r\n    if (type === \"text\") {\r\n      this.setState({\r\n        text: e.target.value\r\n      });\r\n    } else if (type === \"checkbox\") {\r\n      this.setState({\r\n        isChecked: e.target.checked\r\n      });\r\n    }\r\n  };\r\n  //Nie musimy przekazywać propsów poniewaz jest to komponent klasowy\r\n  handleClick = () => {\r\n    const { text, isChecked, date } = this.state;\r\n    const add = this.props.addTask(text, date, isChecked);\r\n    if (add) {\r\n      this.setState({\r\n        text: \"\",\r\n        isChecked: false,\r\n        date: this.minDate\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <>\r\n        <div className=\"form\">\r\n          <div className=\"yes\">\r\n            <label htmlFor=\"\">\r\n              <input\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n                placeholder=\"Dodaj zadanie\"\r\n                value={this.state.text}\r\n              />\r\n            </label>\r\n            <label htmlFor=\"important\">\r\n              <input\r\n                onChange={this.handleChange}\r\n                type=\"checkbox\"\r\n                checked={this.state.isChecked}\r\n                id=\"important\"\r\n              />\r\n              Priorytet\r\n            </label>\r\n          </div>\r\n          <label htmlFor=\"date\">\r\n            Do kiedy zrobić ?\r\n            <input\r\n              onChange={this.handleDate}\r\n              type=\"date\"\r\n              min={this.minDate}\r\n              max={maxDate}\r\n              value={this.state.date}\r\n            />\r\n          </label>\r\n          <div>\r\n            <button onClick={this.handleClick} className=\"add\">\r\n              Dodaj\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = props => {\r\n  const style = {\r\n    color: \"red\"\r\n  };\r\n  const { text, date, id, active, finishDate, important } = props.task;\r\n  if (active) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <p>\r\n            <strong style={important ? style : null}>{text}</strong> -do{\" \"}\r\n            <span>{date}</span>\r\n            <button onClick={() => props.change(id)} className=\"btn\">\r\n              Zostało zrobione\r\n            </button>\r\n            <button onClick={() => props.delete(id)}>X</button>\r\n          </p>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <>\r\n        <div>\r\n          <p>\r\n            <strong>{text}</strong>{\" \"}\r\n            <em>\r\n              (zrobić do <span>{date}</span>)\r\n            </em>\r\n            <br />\r\n            <span>- potwierdzenie wykonania {finish}</span>\r\n            <button className=\"taskdone\" onClick={() => props.delete(id)}>\r\n              X\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      return b.finishDate - a.finishDate;\r\n    });\r\n  }\r\n  //większe jest to co wcześniej występuje w alfabecie!!\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n      if (a < b) {\r\n        return -1;\r\n      } else if (a > b) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      id={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  const doneTasks = done.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      id={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  return (\r\n    <>\r\n      <div className=\"tasks\">\r\n        <h1>Zadania do zrobienia</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>\"Brak zadań\"</p>}\r\n      </div>\r\n      <div className=\"done\">\r\n        <h2>Zadanie zrobione ({doneTasks.length})</h2>\r\n        {done.length > 5 && (\r\n          <p className=\"lastfive\">Wyświetlanych jest 5 ostatnich zadań</p>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\n\nclass App extends Component {\n  counter = 0;\n  state = {\n    tasks: []\n  };\n\n  deleteTask = id => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks\n    });\n  };\n\n  changeTaskStatus = id => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n\n  addTask = (text, date, isChecked) => {\n    if (text === \"\") return alert(\"Musisz dodać jakieś zadanie!\");\n    if (date === \"\") return alert(\"Musisz wybrać date!\");\n    const task = {\n      id: this.counter,\n      text: text, \n      date: date, \n      important: isChecked, \n      active: true,\n      finishDate: null\n    };\n    let tasks = [...this.state.tasks];\n    tasks.push(task);\n    this.setState({\n      tasks\n    });\n    this.counter++;\n    return true;\n  };\n\n  render() {\n    return (\n      <>\n        <AddTask addTask={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}